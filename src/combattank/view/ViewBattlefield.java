/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *
 * SQM = Squaremeters;
 */
package combattank.view;

import combattank.controller.*;
import componente.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JPanel;

/**
 *
 * @author skyli
 */
public class ViewBattlefield extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private int matBattleField[][];
    private battleField campoBatalha;
    
    public ViewBattlefield() {
        initComponents();
        initBattleField();
        initTank();
        run();
    }

    private void run(){
        this.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBattlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBattlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBattlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBattlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewBattlefield().setVisible(true);
            }
        });
    }
    
    private void initBattleField(){
        campoBatalha = new battleField();
        campoBatalha.setLocation(50,100);
        campoBatalha.setSize(500, 500);
        campoBatalha.setVisible(true);
        matBattleField = campoBatalha.getMatBattleField();
        this.add(campoBatalha);
    }
    
    private void initTank(){
        //controllerTank tank = new controllerTank();
        int idTank = 1;
        JPanel tank = new JPanel();
        tank.setSize(18, 18);
        tank.setLocation(5, 5);
        tank.setBackground(Color.black);
        
        JPanel sqmAux = getSQM(1,5);
        matBattleField[1][5] = idTank;
        
        sqmAux.add(tank);
        
        new Thread(){
            @Override
            public void run(){
                moveTank(idTank);
            }
        }.start();
    }
    
    private void moveTank(int idTank){
        this.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() != 32)
                    moveTankByKeyPress(e.getKeyCode(),idTank);
                else
                    shootTank(idTank);
            }

            @Override
            public void keyReleased(KeyEvent e) {}
        });
    }
    
    private void moveTankByKeyPress(int keyCode, int idTank){
        int[] oldSQM = null;
        int xAux, yAux;
        
        //encontra o tank e remove do panel
        oldSQM = getSQMByTank(idTank);
        if (oldSQM != null){
            removeTank(oldSQM);
            adicionaTank(oldSQM,keyCode);
            //coloca o tank no proximo SQM
        }
    }
    
    //procura no campo de batalha o jpanel com o nome correspondente
    private SQM getSQM(int x, int y){
        SQM sqmAux = new SQM();
        
        for (int i = 0; i < campoBatalha.getComponentCount(); i++) {
            try{
                sqmAux = (SQM) campoBatalha.getComponent(i);
            }catch(Exception E){}
            
            if (sqmAux.getPosX() == x && sqmAux.getPosY() == y)
                return (SQM) campoBatalha.getComponent(i);
        }
        
        return null;
    }
    
    private int[] getSQMByTank(int idTank){
        int[] retorno = new int[2];
        
        for (int i = 0; i < matBattleField.length; i++) {
            for (int j = 0; j < matBattleField[j].length; j++) {
                if (matBattleField[i][j] == idTank){
                    System.out.println(" i " + String.valueOf(i));
                    retorno[0] = i;
                    retorno[1] = j;
                    
                    return retorno;
                }
            }
        }
        return null;
    }
    
    private void removeTank(int[] oldSQM){
        JPanel jPanelAux;
        jPanelAux = getSQM(oldSQM[0], oldSQM[1]);
        //remove tank do campo de batalha
        matBattleField[oldSQM[0]][oldSQM[1]] = 0;
        jPanelAux.removeAll();
        jPanelAux.repaint();
    }
    
    private void adicionaTank(int[] oldSQM, int keyCode){
        int posX = oldSQM[0];
        int posY = oldSQM[1];
        SQM sqmAux = new SQM();
        
        JPanel tank = new JPanel();
        tank.setSize(18, 18);
        tank.setLocation(5, 5);
        tank.setBackground(Color.black);
        
        switch(keyCode){
            case 38:
            case 87:
                sqmAux = getSQM(posX, posY - 1);
                matBattleField[posX][posY - 1] = 1;                
                break;
            case 39:
            case 68:
                sqmAux = getSQM(posX + 1, posY);
                matBattleField[posX + 1][posY] = 1;                
                break;
            case 40:
            case 83:
                sqmAux = getSQM(posX, posY + 1);
                matBattleField[posX][posY + 1] = 1;                
                break;
            case 65:
            case 37:
                sqmAux = getSQM(posX - 1, posY);
                matBattleField[posX - 1][posY] = 1;                
                break;
            
        }
        
        sqmAux.add(tank);
        sqmAux.repaint();
        
    }

    private void shootTank(int idTank){
        new Thread(){
            @Override
            public void run(){
                shoot(idTank);
            }
        }.start();
    }
    
    private void shoot(int idTank){
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
